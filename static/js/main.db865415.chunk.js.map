{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressKey","handleKeyPress","e","setState","key","toString","document","addEventListener","this","removeEventListener","React","Component","ReactDOM","render","getElementById"],"mappings":"oNAMaA,EAAb,4MACEC,MAA4B,CAC1BC,SAAU,MAFd,EAaEC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEH,SAAUE,EAAEE,IAAIC,cAdpC,uDAKE,WACEC,SAASC,iBAAiB,QAASC,KAAKP,kBAN5C,kCASE,WACEK,SAASG,oBAAoB,QAASD,KAAKP,kBAV/C,oBAiBE,WACE,IAAQD,EAAaQ,KAAKT,MAAlBC,SAER,OACE,8BACGA,EACC,0DAEGA,EAFH,OAMA,8DA7BV,GAAyBU,IAAMC,W,MCD/BC,IAASC,OACP,cAAC,EAAD,IACAP,SAASQ,eAAe,W","file":"static/js/main.db865415.chunk.js","sourcesContent":["import React from 'react';\n\ninterface AppState {\n  pressKey: string | null;\n}\n\nexport class App extends React.Component<{}, AppState> {\n  state: Readonly<AppState> = {\n    pressKey: null,\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPress);\n  }\n\n  handleKeyPress = (e: KeyboardEvent) => {\n    this.setState({ pressKey: e.key.toString() });\n  };\n\n  render(): React.ReactNode {\n    const { pressKey } = this.state;\n\n    return (\n      <div>\n        {pressKey ? (\n          <p>\n            The last pressed key is [\n            {pressKey}\n            ]\n          </p>\n        ) : (\n          <p>Nothing was pressed yet</p>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}